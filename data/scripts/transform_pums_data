#!/bin/bash
#------------------------------------------------------------------------------
# Transform data from PUMS 2016-2020 CSV for further processing
#
# Example:
# $ ./transform_pums_data --languages < input.csv > output.json
# OR
# $ ./transform_pums_data --all < input.csv > output.json
#
# CSV Header Key
#
# PUMA = PUMA (Public Use Microdata Area)
# ST = State
# PWGTP = Person weight
# LANP = Language other than English spoken at home
#
# See: https://www2.census.gov/programs-surveys/acs/tech_docs/pums/data_dict/PUMS_Data_Dictionary_2016-2020.pdf
#------------------------------------------------------------------------------

set -eux

if [[ "$#" -ne 1 ]]; then
  echo "Required argument missing"
  exit 1
fi

all=false
if [[ "$1" == "--all" ]]; then
  all=true
elif [[ "$1" != "--languages" ]]; then
  echo "Invalid argument: $1. Must be --all or --languages."
  exit 1
fi

# Default settings when grouping by language
filter_cmd=(awk 'NR==1 || /[^,]$/') # all data rows must have a LANP value (NR==1 is to keep headers)
jq_cmd=(jq '[group_by(.ST)[] | group_by(.PUMA)[] | group_by(.LANP)[] | [.[0].ST, .[0].PUMA, .[0].LANP, (map(.PWGTP) | add)]] | map({state: .[0], puma: .[1], language: .[2], count: .[3]})')
# PUMA,ST,PWGTP,LANP
field_indices_to_keep='5,7,9,94'

# No filtering by language
if [ "$all" = true ]; then
  filter_cmd=(cat) # keep all rows (cat is identity function)
  jq_cmd=(jq '[group_by(.ST)[] | group_by(.PUMA)[] | [.[0].ST, .[0].PUMA, (map(.PWGTP) | add)]] | map({state: .[0], puma: .[1], count: .[2]})')
  # PUMA,ST,PWGTP
  field_indices_to_keep='5,7,9'
fi

# Extract relevant fields
cut -d, -f$field_indices_to_keep | \
    # Filter rows by language (or not)
    "${filter_cmd[@]}" | \
      # Convert CSV to JSON
      csvtojson --colParser='{"PWGTP":"number"}' | \
        # Group by state & PUMA and optionally by language
        "${jq_cmd[@]}"
